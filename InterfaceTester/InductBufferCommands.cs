// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: induct_buffer_commands.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GibController {

  /// <summary>Holder for reflection information generated from induct_buffer_commands.proto</summary>
  public static partial class InductBufferCommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for induct_buffer_commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InductBufferCommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxpbmR1Y3RfYnVmZmVyX2NvbW1hbmRzLnByb3RvEitwbGF0Zm9ybXMuYXV0",
            "b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyGh9nb29nbGUvcHJvdG9i",
            "dWYvdGltZXN0YW1wLnByb3RvIssBCg5JZGVudGlmaWNhdGlvbhISCgptZXNz",
            "YWdlX2lkGAEgASgJEhEKCWJ1ZmZlcl9pZBgCIAEoCRIYChBzb2Z0d2FyZV92",
            "ZXJzaW9uGAMgASgJEhAKCGNhcGFjaXR5GAQgASgFEi0KCWJvb3RfdGltZRgF",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNwoTY3VycmVudF9z",
            "eXN0ZW1fdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAi",
            "pwEKCURvY2tFdmVudBISCgptZXNzYWdlX2lkGAEgASgJEi8KC2NoYW5nZV90",
            "aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJVCg10b3Rl",
            "X3ByZXNlbmNlGAMgASgOMj4ucGxhdGZvcm1zLmF1dG9tYXRpb24uaGlwcGFz",
            "dXMuaW5kdWN0X2J1ZmZlci5QcmVzZW5jZUV2ZW50VHlwZSIuChhBY2NlcHRU",
            "b3RlRnJvbUFndlJlcXVlc3QSEgoKbWVzc2FnZV9pZBgBIAEoCSJ7ChdBY2Nl",
            "cHRUb3RlRnJvbUFndlJlc3VsdBISCgptZXNzYWdlX2lkGAEgASgJEkwKC3Jl",
            "c3VsdF9jb2RlGAIgASgOMjcucGxhdGZvcm1zLmF1dG9tYXRpb24uaGlwcGFz",
            "dXMuaW5kdWN0X2J1ZmZlci5SZXN1bHRDb2RlIrACCgtTbG90Q29udGVudBIP",
            "CgdzbG90X2lkGAEgASgJElMKCGNvbnRlbnRzGAIgASgOMkEucGxhdGZvcm1z",
            "LmF1dG9tYXRpb24uaGlwcGFzdXMuaW5kdWN0X2J1ZmZlci5TbG90Q29udGVu",
            "dC5Db250ZW50cxJTCgliYXJfY29kZXMYAyADKAsyQC5wbGF0Zm9ybXMuYXV0",
            "b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLlNsb3RDb250ZW50LkJh",
            "ckNvZGUaKgoHQmFyQ29kZRIQCghiYXJfY29kZRgBIAEoCRINCgV0aGV0YRgC",
            "IAEoASI6CghDb250ZW50cxIUChBDT05URU5UU19VTktOT1dOEAASCQoFRU1Q",
            "VFkQARINCglOT05fRU1QVFkQAiLKAQoKU2NhblJlc3VsdBIQCghiYXJfY29k",
            "ZRgBIAEoCRJZChJ0b3RlX2NvbnRlbnRzX3R5cGUYAiABKA4yPS5wbGF0Zm9y",
            "bXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLlRvdGVDb250",
            "ZW50c1R5cGUSTwoNc2xvdF9jb250ZW50cxgDIAMoCzI4LnBsYXRmb3Jtcy5h",
            "dXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuU2xvdENvbnRlbnQi",
            "nAEKE1NlbmRUb0J1ZmZlclJlcXVlc3QSEgoKbWVzc2FnZV9pZBgBIAEoCRIP",
            "Cgd0b3RlX2lkGAIgASgJEhcKD2FjY2Vzc19wcmlvcml0eRgDIAEoBRJHCgZy",
            "ZXN1bHQYBCABKAsyNy5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5p",
            "bmR1Y3RfYnVmZmVyLlNjYW5SZXN1bHQizwEKElNlbmRUb0J1ZmZlclJlc3Vs",
            "dBISCgptZXNzYWdlX2lkGAEgASgJEkwKC3Jlc3VsdF9jb2RlGAIgASgOMjcu",
            "cGxhdGZvcm1zLmF1dG9tYXRpb24uaGlwcGFzdXMuaW5kdWN0X2J1ZmZlci5S",
            "ZXN1bHRDb2RlEhAKCGxvY2F0aW9uGAMgASgJEkUKBHNjYW4YBCABKAsyNy5w",
            "bGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLlNj",
            "YW5SZXN1bHQiqAMKF1NjYW5Ub3RlQ29udGVudHNSZXF1ZXN0EhIKCm1lc3Nh",
            "Z2VfaWQYASABKAkSZAoLdG90ZV9zb3VyY2UYAiABKA4yTy5wbGF0Zm9ybXMu",
            "YXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLlNjYW5Ub3RlQ29u",
            "dGVudHNSZXF1ZXN0LlRvdGVTb3VyY2USDwoHdG90ZV9pZBgDIAEoCRJgCglz",
            "Y2FuX3R5cGUYBCABKA4yTS5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1",
            "cy5pbmR1Y3RfYnVmZmVyLlNjYW5Ub3RlQ29udGVudHNSZXF1ZXN0LlNjYW5U",
            "eXBlIkoKClRvdGVTb3VyY2USFwoTVE9URV9TT1VSQ0VfVU5LTk9XThAAEggK",
            "BERPQ0sQARIKCgZCVUZGRVIQAhINCglTQ0FOTkFCTEUQAyJUCghTY2FuVHlw",
            "ZRIVChFTQ0FOX1RZUEVfVU5LTk9XThAAEg0KCUZVTExfU0NBThABEhUKEVRP",
            "VEVfQkFSQ09ERV9PTkxZEAISCwoHTk9USElORxADIsEBChZTY2FuVG90ZUNv",
            "bnRlbnRzUmVzdWx0EhIKCm1lc3NhZ2VfaWQYASABKAkSTAoLcmVzdWx0X2Nv",
            "ZGUYAiABKA4yNy5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1",
            "Y3RfYnVmZmVyLlJlc3VsdENvZGUSRQoEc2NhbhgDIAEoCzI3LnBsYXRmb3Jt",
            "cy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuU2NhblJlc3Vs",
            "dCI4ChFTZW5kVG9Eb2NrUmVxdWVzdBISCgptZXNzYWdlX2lkGAEgASgJEg8K",
            "B3RvdGVfaWQYAiABKAkiuwEKEFNlbmRUb0RvY2tSZXN1bHQSEgoKbWVzc2Fn",
            "ZV9pZBgBIAEoCRJMCgtyZXN1bHRfY29kZRgCIAEoDjI3LnBsYXRmb3Jtcy5h",
            "dXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuUmVzdWx0Q29kZRJF",
            "CgRzY2FuGAMgASgLMjcucGxhdGZvcm1zLmF1dG9tYXRpb24uaGlwcGFzdXMu",
            "aW5kdWN0X2J1ZmZlci5TY2FuUmVzdWx0IisKFUVqZWN0VG90ZVRvQWd2UmVx",
            "dWVzdBISCgptZXNzYWdlX2lkGAEgASgJIngKFEVqZWN0VG90ZVRvQWd2UmVz",
            "dWx0EhIKCm1lc3NhZ2VfaWQYASABKAkSTAoLcmVzdWx0X2NvZGUYAiABKA4y",
            "Ny5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVy",
            "LlJlc3VsdENvZGUiJgoQR2V0U3RhdHVzUmVxdWVzdBISCgptZXNzYWdlX2lk",
            "GAEgASgJIpQBCgpab25lU3RhdHVzElAKDXRvdGVfcHJlc2VuY2UYASABKA4y",
            "OS5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVy",
            "LlpvbmVQcmVzZW5jZRI0ChBsYXN0X2NoYW5nZV90aW1lGAIgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcCKgBQoPR2V0U3RhdHVzUmVzdWx0EhIK",
            "Cm1lc3NhZ2VfaWQYASABKAkSFQoNbGFzdF9ldmVudF9pZBgCIAEoCRIwCgxj",
            "dXJyZW50X3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EkwKC2RvY2tfc3RhdHVzGAQgASgLMjcucGxhdGZvcm1zLmF1dG9tYXRpb24u",
            "aGlwcGFzdXMuaW5kdWN0X2J1ZmZlci5ab25lU3RhdHVzEk8KDnNjYW5uYWJs",
            "ZV9pdGVtGAUgASgLMjcucGxhdGZvcm1zLmF1dG9tYXRpb24uaGlwcGFzdXMu",
            "aW5kdWN0X2J1ZmZlci5ab25lU3RhdHVzEmQKEGJ1ZmZlcl9pbnZlbnRvcnkY",
            "BiADKAsySi5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3Rf",
            "YnVmZmVyLkdldFN0YXR1c1Jlc3VsdC5JbnZlbnRvcnlJdGVtEl0KD2N1cnJl",
            "bnRfY29tbWFuZBgHIAEoCzJELnBsYXRmb3Jtcy5hdXRvbWF0aW9uLmhpcHBh",
            "c3VzLmluZHVjdF9idWZmZXIuR2V0U3RhdHVzUmVzdWx0LkNvbW1hbmQSZQoX",
            "bGFzdF9leGN1dGVkX2NvbW1hbmRfaWQYCCABKAsyRC5wbGF0Zm9ybXMuYXV0",
            "b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLkdldFN0YXR1c1Jlc3Vs",
            "dC5Db21tYW5kGjUKDUludmVudG9yeUl0ZW0SDwoHdG90ZV9pZBgBIAEoCRIT",
            "Cgtsb2NhdGlvbl9pZBgCIAEoCRouCgdDb21tYW5kEg8KB2NvbW1hbmQYASAB",
            "KAUSEgoKbWVzc2FnZV9pZBgCIAEoCSLGBAoTSW5kdWN0QnVmZmVyUmVxdWVz",
            "dBJgCg9hY2NlcHRfZnJvbV9hZ3YYASABKAsyRS5wbGF0Zm9ybXMuYXV0b21h",
            "dGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLkFjY2VwdFRvdGVGcm9tQWd2",
            "UmVxdWVzdEgAEloKDnNlbmRfdG9fYnVmZmVyGAIgASgLMkAucGxhdGZvcm1z",
            "LmF1dG9tYXRpb24uaGlwcGFzdXMuaW5kdWN0X2J1ZmZlci5TZW5kVG9CdWZm",
            "ZXJSZXF1ZXN0SAASXQoNc2Nhbl9jb250ZW50cxgDIAEoCzJELnBsYXRmb3Jt",
            "cy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuU2NhblRvdGVD",
            "b250ZW50c1JlcXVlc3RIABJWCgxzZW5kX3RvX2RvY2sYBCABKAsyPi5wbGF0",
            "Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLlNlbmRU",
            "b0RvY2tSZXF1ZXN0SAASWQoLc2VuZF90b19hZ3YYBSABKAsyQi5wbGF0Zm9y",
            "bXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLkVqZWN0VG90",
            "ZVRvQWd2UmVxdWVzdEgAElMKCmdldF9zdGF0dXMYBiABKAsyPS5wbGF0Zm9y",
            "bXMuYXV0b21hdGlvbi5oaXBwYXN1cy5pbmR1Y3RfYnVmZmVyLkdldFN0YXR1",
            "c1JlcXVlc3RIAEIKCghyZXF1ZXN0cyL+BQoRSW5kdWN0QnVmZmVyRXZlbnQS",
            "SQoCaWQYASABKAsyOy5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBwYXN1cy5p",
            "bmR1Y3RfYnVmZmVyLklkZW50aWZpY2F0aW9uSAASTAoKZG9ja19ldmVudBgC",
            "IAEoCzI2LnBsYXRmb3Jtcy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9i",
            "dWZmZXIuRG9ja0V2ZW50SAASZgoWYWNjZXB0X2Zyb21fYWd2X3Jlc3VsdBgK",
            "IAEoCzJELnBsYXRmb3Jtcy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9i",
            "dWZmZXIuQWNjZXB0VG90ZUZyb21BZ3ZSZXN1bHRIABJgChVzZW5kX3RvX2J1",
            "ZmZlcl9yZXN1bHQYCyABKAsyPy5wbGF0Zm9ybXMuYXV0b21hdGlvbi5oaXBw",
            "YXN1cy5pbmR1Y3RfYnVmZmVyLlNlbmRUb0J1ZmZlclJlc3VsdEgAEmMKFHNj",
            "YW5fY29udGVudHNfcmVzdWx0GAwgASgLMkMucGxhdGZvcm1zLmF1dG9tYXRp",
            "b24uaGlwcGFzdXMuaW5kdWN0X2J1ZmZlci5TY2FuVG90ZUNvbnRlbnRzUmVz",
            "dWx0SAASXAoTc2VuZF90b19kb2NrX3Jlc3VsdBgNIAEoCzI9LnBsYXRmb3Jt",
            "cy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuU2VuZFRvRG9j",
            "a1Jlc3VsdEgAEl8KEnNlbmRfdG9fYWd2X3Jlc3VsdBgOIAEoCzJBLnBsYXRm",
            "b3Jtcy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIuRWplY3RU",
            "b3RlVG9BZ3ZSZXN1bHRIABJZChFnZXRfc3RhdHVzX3Jlc3VsdBgPIAEoCzI8",
            "LnBsYXRmb3Jtcy5hdXRvbWF0aW9uLmhpcHBhc3VzLmluZHVjdF9idWZmZXIu",
            "R2V0U3RhdHVzUmVzdWx0SABCBwoFZXZlbnQqQgoMWm9uZVByZXNlbmNlEhkK",
            "FVpPTkVfUFJFU0VOQ0VfVU5LTk9XThAAEgkKBUVNUFRZEAESDAoIT0NDVVBJ",
            "RUQQAipZChFQcmVzZW5jZUV2ZW50VHlwZRIfChtQUkVTRU5DRV9FVkVOVF9U",
            "WVBFX1VOS05PV04QABIQCgxUT1RFX0FSUklWRUQQARIRCg1UT1RFX0RFUEFS",
            "VEVEEAIqnAIKClJlc3VsdENvZGUSFwoTVU5LTk9XTl9SRVNVTFRfQ09ERRAA",
            "EgYKAk9LEAESDwoLTk9fQ0FQQUNJVFkQAhIPCgtOT1RfUFJFU0VOVBADEhgK",
            "FFRPVEVfQUxSRUFEWV9QUkVTRU5UEAQSFAoQVE9URV9JRF9NSVNNQVRDSBAF",
            "EgoKBk5PX0FHVhAGEgsKB1RJTUVPVVQQBxIdChlDT01NQU5EX0FMUkVBRFlf",
            "RVhFQ1VUSU5HEAgSEgoOSEFSRFdBUkVfRkFVTFQQCRISCg5NVUxUSVBMRV9U",
            "T1RFUxAKEg0KCUJBRF9TVEFURRALEhMKD0lOVkFMSURfUkVRVUVTVBAMEhcK",
            "E0NPTU1BTkRfSU5URVJSVVBURUQQDSpFChBUb3RlQ29udGVudHNUeXBlEh4K",
            "GlRPVEVfQ09OVEVOVFNfVFlQRV9VTktOT1dOEAASEQoNUk9CT1RFQ0hfVE9U",
            "RRABQhCqAg1HSUJDb250cm9sbGVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GibController.ZonePresence), typeof(global::GibController.PresenceEventType), typeof(global::GibController.ResultCode), typeof(global::GibController.ToteContentsType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.Identification), global::GibController.Identification.Parser, new[]{ "MessageId", "BufferId", "SoftwareVersion", "Capacity", "BootTime", "CurrentSystemTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.DockEvent), global::GibController.DockEvent.Parser, new[]{ "MessageId", "ChangeTime", "TotePresence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.AcceptToteFromAgvRequest), global::GibController.AcceptToteFromAgvRequest.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.AcceptToteFromAgvResult), global::GibController.AcceptToteFromAgvResult.Parser, new[]{ "MessageId", "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SlotContent), global::GibController.SlotContent.Parser, new[]{ "SlotId", "Contents", "BarCodes" }, null, new[]{ typeof(global::GibController.SlotContent.Types.Contents) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SlotContent.Types.BarCode), global::GibController.SlotContent.Types.BarCode.Parser, new[]{ "BarCode_", "Theta" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.ScanResult), global::GibController.ScanResult.Parser, new[]{ "BarCode", "ToteContentsType", "SlotContents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SendToBufferRequest), global::GibController.SendToBufferRequest.Parser, new[]{ "MessageId", "ToteId", "AccessPriority", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SendToBufferResult), global::GibController.SendToBufferResult.Parser, new[]{ "MessageId", "ResultCode", "Location", "Scan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.ScanToteContentsRequest), global::GibController.ScanToteContentsRequest.Parser, new[]{ "MessageId", "ToteSource", "ToteId", "ScanType" }, null, new[]{ typeof(global::GibController.ScanToteContentsRequest.Types.ToteSource), typeof(global::GibController.ScanToteContentsRequest.Types.ScanType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.ScanToteContentsResult), global::GibController.ScanToteContentsResult.Parser, new[]{ "MessageId", "ResultCode", "Scan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SendToDockRequest), global::GibController.SendToDockRequest.Parser, new[]{ "MessageId", "ToteId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.SendToDockResult), global::GibController.SendToDockResult.Parser, new[]{ "MessageId", "ResultCode", "Scan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.EjectToteToAgvRequest), global::GibController.EjectToteToAgvRequest.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.EjectToteToAgvResult), global::GibController.EjectToteToAgvResult.Parser, new[]{ "MessageId", "ResultCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.GetStatusRequest), global::GibController.GetStatusRequest.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.ZoneStatus), global::GibController.ZoneStatus.Parser, new[]{ "TotePresence", "LastChangeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.GetStatusResult), global::GibController.GetStatusResult.Parser, new[]{ "MessageId", "LastEventId", "CurrentTime", "DockStatus", "ScannableItem", "BufferInventory", "CurrentCommand", "LastExcutedCommandId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GibController.GetStatusResult.Types.InventoryItem), global::GibController.GetStatusResult.Types.InventoryItem.Parser, new[]{ "ToteId", "LocationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.GetStatusResult.Types.Command), global::GibController.GetStatusResult.Types.Command.Parser, new[]{ "Command_", "MessageId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.InductBufferRequest), global::GibController.InductBufferRequest.Parser, new[]{ "AcceptFromAgv", "SendToBuffer", "ScanContents", "SendToDock", "SendToAgv", "GetStatus" }, new[]{ "Requests" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GibController.InductBufferEvent), global::GibController.InductBufferEvent.Parser, new[]{ "Id", "DockEvent", "AcceptFromAgvResult", "SendToBufferResult", "ScanContentsResult", "SendToDockResult", "SendToAgvResult", "GetStatusResult" }, new[]{ "Event" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ZonePresence {
    [pbr::OriginalName("ZONE_PRESENCE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("EMPTY")] Empty = 1,
    [pbr::OriginalName("OCCUPIED")] Occupied = 2,
  }

  public enum PresenceEventType {
    [pbr::OriginalName("PRESENCE_EVENT_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("TOTE_ARRIVED")] ToteArrived = 1,
    [pbr::OriginalName("TOTE_DEPARTED")] ToteDeparted = 2,
  }

  /// <summary>
  /// Finer grained error details of an operation.
  /// </summary>
  public enum ResultCode {
    [pbr::OriginalName("UNKNOWN_RESULT_CODE")] UnknownResultCode = 0,
    /// <summary>
    /// Result was successful.
    /// </summary>
    [pbr::OriginalName("OK")] Ok = 1,
    /// <summary>
    /// No capacity to move the tote to the desired location.
    /// </summary>
    [pbr::OriginalName("NO_CAPACITY")] NoCapacity = 2,
    /// <summary>
    /// No tote was available to process at desired location.
    /// </summary>
    [pbr::OriginalName("NOT_PRESENT")] NotPresent = 3,
    /// <summary>
    /// A tote with the given ID was already loaded.
    /// </summary>
    [pbr::OriginalName("TOTE_ALREADY_PRESENT")] ToteAlreadyPresent = 4,
    /// <summary>
    /// The tote present didn't have the requested ID
    /// </summary>
    [pbr::OriginalName("TOTE_ID_MISMATCH")] ToteIdMismatch = 5,
    /// <summary>
    /// No AGV was available to complete the action.
    /// </summary>
    [pbr::OriginalName("NO_AGV")] NoAgv = 6,
    /// <summary>
    /// The operation wasn't completed within the expected time by the PLC
    /// (i.e. the PLC thinks a tote is stuck).
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = 7,
    /// <summary>
    /// A command is already being executed bythe PLC.
    /// </summary>
    [pbr::OriginalName("COMMAND_ALREADY_EXECUTING")] CommandAlreadyExecuting = 8,
    /// <summary>
    /// The hardware is not operational for some reason.
    /// </summary>
    [pbr::OriginalName("HARDWARE_FAULT")] HardwareFault = 9,
    /// <summary>
    /// There are too many totes on the conveyor to complete the operation.
    /// </summary>
    [pbr::OriginalName("MULTIPLE_TOTES")] MultipleTotes = 10,
    /// <summary>
    /// The machine isn't in the right state to accept
    /// this command, but is not in a fault (e.g. a conveyor is
    /// already rolling and we expect it to stop first).
    /// </summary>
    [pbr::OriginalName("BAD_STATE")] BadState = 11,
    /// <summary>
    /// The request as structured is invalid.
    /// </summary>
    [pbr::OriginalName("INVALID_REQUEST")] InvalidRequest = 12,
    /// <summary>
    /// Something interrupted the command (e.g. someone
    /// placed a tote on the dock when the conveyor was
    /// running).
    /// </summary>
    [pbr::OriginalName("COMMAND_INTERRUPTED")] CommandInterrupted = 13,
  }

  public enum ToteContentsType {
    [pbr::OriginalName("TOTE_CONTENTS_TYPE_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Universal tote with 20 hard-drive capacity dunnage specifically used
    /// for robotech.
    /// </summary>
    [pbr::OriginalName("ROBOTECH_TOTE")] RobotechTote = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Identification for a particular induct buffer.
  /// </summary>
  public sealed partial class Identification : pb::IMessage<Identification> {
    private static readonly pb::MessageParser<Identification> _parser = new pb::MessageParser<Identification>(() => new Identification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Identification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identification(Identification other) : this() {
      messageId_ = other.messageId_;
      bufferId_ = other.bufferId_;
      softwareVersion_ = other.softwareVersion_;
      capacity_ = other.capacity_;
      bootTime_ = other.bootTime_ != null ? other.bootTime_.Clone() : null;
      currentSystemTime_ = other.currentSystemTime_ != null ? other.currentSystemTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Identification Clone() {
      return new Identification(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buffer_id" field.</summary>
    public const int BufferIdFieldNumber = 2;
    private string bufferId_ = "";
    /// <summary>
    /// Unique physical identifier for the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BufferId {
      get { return bufferId_; }
      set {
        bufferId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "software_version" field.</summary>
    public const int SoftwareVersionFieldNumber = 3;
    private string softwareVersion_ = "";
    /// <summary>
    /// The software version running on the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoftwareVersion {
      get { return softwareVersion_; }
      set {
        softwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 4;
    private int capacity_;
    /// <summary>
    /// Tote capacity of the buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "boot_time" field.</summary>
    public const int BootTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp bootTime_;
    /// <summary>
    /// When the physical GIB machine was brought online.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp BootTime {
      get { return bootTime_; }
      set {
        bootTime_ = value;
      }
    }

    /// <summary>Field number for the "current_system_time" field.</summary>
    public const int CurrentSystemTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp currentSystemTime_;
    /// <summary>
    /// Current system time on physical controller of the GIB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CurrentSystemTime {
      get { return currentSystemTime_; }
      set {
        currentSystemTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Identification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Identification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (BufferId != other.BufferId) return false;
      if (SoftwareVersion != other.SoftwareVersion) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(BootTime, other.BootTime)) return false;
      if (!object.Equals(CurrentSystemTime, other.CurrentSystemTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (BufferId.Length != 0) hash ^= BufferId.GetHashCode();
      if (SoftwareVersion.Length != 0) hash ^= SoftwareVersion.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (bootTime_ != null) hash ^= BootTime.GetHashCode();
      if (currentSystemTime_ != null) hash ^= CurrentSystemTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (BufferId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BufferId);
      }
      if (SoftwareVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoftwareVersion);
      }
      if (Capacity != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Capacity);
      }
      if (bootTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BootTime);
      }
      if (currentSystemTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CurrentSystemTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (BufferId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BufferId);
      }
      if (SoftwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoftwareVersion);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (bootTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootTime);
      }
      if (currentSystemTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentSystemTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Identification other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.BufferId.Length != 0) {
        BufferId = other.BufferId;
      }
      if (other.SoftwareVersion.Length != 0) {
        SoftwareVersion = other.SoftwareVersion;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.bootTime_ != null) {
        if (bootTime_ == null) {
          bootTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        BootTime.MergeFrom(other.BootTime);
      }
      if (other.currentSystemTime_ != null) {
        if (currentSystemTime_ == null) {
          currentSystemTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CurrentSystemTime.MergeFrom(other.CurrentSystemTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            BufferId = input.ReadString();
            break;
          }
          case 26: {
            SoftwareVersion = input.ReadString();
            break;
          }
          case 32: {
            Capacity = input.ReadInt32();
            break;
          }
          case 42: {
            if (bootTime_ == null) {
              bootTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(bootTime_);
            break;
          }
          case 50: {
            if (currentSystemTime_ == null) {
              currentSystemTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(currentSystemTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event for changes when a tote is or is not at a dock.
  /// </summary>
  public sealed partial class DockEvent : pb::IMessage<DockEvent> {
    private static readonly pb::MessageParser<DockEvent> _parser = new pb::MessageParser<DockEvent>(() => new DockEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockEvent(DockEvent other) : this() {
      messageId_ = other.messageId_;
      changeTime_ = other.changeTime_ != null ? other.changeTime_.Clone() : null;
      totePresence_ = other.totePresence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockEvent Clone() {
      return new DockEvent(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "change_time" field.</summary>
    public const int ChangeTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp changeTime_;
    /// <summary>
    /// The time the event was detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ChangeTime {
      get { return changeTime_; }
      set {
        changeTime_ = value;
      }
    }

    /// <summary>Field number for the "tote_presence" field.</summary>
    public const int TotePresenceFieldNumber = 3;
    private global::GibController.PresenceEventType totePresence_ = 0;
    /// <summary>
    ///  Whether a tote arrived or left the dock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.PresenceEventType TotePresence {
      get { return totePresence_; }
      set {
        totePresence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (!object.Equals(ChangeTime, other.ChangeTime)) return false;
      if (TotePresence != other.TotePresence) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (changeTime_ != null) hash ^= ChangeTime.GetHashCode();
      if (TotePresence != 0) hash ^= TotePresence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (changeTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChangeTime);
      }
      if (TotePresence != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TotePresence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (changeTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeTime);
      }
      if (TotePresence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TotePresence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockEvent other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.changeTime_ != null) {
        if (changeTime_ == null) {
          changeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ChangeTime.MergeFrom(other.ChangeTime);
      }
      if (other.TotePresence != 0) {
        TotePresence = other.TotePresence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            if (changeTime_ == null) {
              changeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(changeTime_);
            break;
          }
          case 24: {
            totePresence_ = (global::GibController.PresenceEventType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ask the Induct buffer to load a tote from a docked agv, this simply starts
  /// the conveyor.  Arrival (and conveyor stoppage) is confirmed by a DockEvent.
  /// Internally, the GIB will have a timeout for when to stop the motor if nothing
  /// arrives, this will be long (order of minutes) and will silently fail if
  /// nothing arrives.
  /// </summary>
  public sealed partial class AcceptToteFromAgvRequest : pb::IMessage<AcceptToteFromAgvRequest> {
    private static readonly pb::MessageParser<AcceptToteFromAgvRequest> _parser = new pb::MessageParser<AcceptToteFromAgvRequest>(() => new AcceptToteFromAgvRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptToteFromAgvRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvRequest(AcceptToteFromAgvRequest other) : this() {
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvRequest Clone() {
      return new AcceptToteFromAgvRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptToteFromAgvRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptToteFromAgvRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptToteFromAgvRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The result of AcceptToteFromAgvRequest request.
  /// </summary>
  public sealed partial class AcceptToteFromAgvResult : pb::IMessage<AcceptToteFromAgvResult> {
    private static readonly pb::MessageParser<AcceptToteFromAgvResult> _parser = new pb::MessageParser<AcceptToteFromAgvResult>(() => new AcceptToteFromAgvResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcceptToteFromAgvResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvResult(AcceptToteFromAgvResult other) : this() {
      messageId_ = other.messageId_;
      resultCode_ = other.resultCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcceptToteFromAgvResult Clone() {
      return new AcceptToteFromAgvResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// The message id of the request that this is a result of.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::GibController.ResultCode resultCode_ = 0;
    /// <summary>
    /// Result of the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ResultCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcceptToteFromAgvResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcceptToteFromAgvResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ResultCode != other.ResultCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcceptToteFromAgvResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            resultCode_ = (global::GibController.ResultCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contents of a slot as detected from imaging and other sensors.
  /// </summary>
  public sealed partial class SlotContent : pb::IMessage<SlotContent> {
    private static readonly pb::MessageParser<SlotContent> _parser = new pb::MessageParser<SlotContent>(() => new SlotContent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlotContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotContent(SlotContent other) : this() {
      slotId_ = other.slotId_;
      contents_ = other.contents_;
      barCodes_ = other.barCodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlotContent Clone() {
      return new SlotContent(this);
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 1;
    private string slotId_ = "";
    /// <summary>
    /// Slot ID this contents refers to. See http://shortn/_Vxd3smNENI for
    /// a reference on tote IDs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlotId {
      get { return slotId_; }
      set {
        slotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 2;
    private global::GibController.SlotContent.Types.Contents contents_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.SlotContent.Types.Contents Contents {
      get { return contents_; }
      set {
        contents_ = value;
      }
    }

    /// <summary>Field number for the "bar_codes" field.</summary>
    public const int BarCodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GibController.SlotContent.Types.BarCode> _repeated_barCodes_codec
        = pb::FieldCodec.ForMessage(26, global::GibController.SlotContent.Types.BarCode.Parser);
    private readonly pbc::RepeatedField<global::GibController.SlotContent.Types.BarCode> barCodes_ = new pbc::RepeatedField<global::GibController.SlotContent.Types.BarCode>();
    /// <summary>
    /// Bar codes detected in the slot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GibController.SlotContent.Types.BarCode> BarCodes {
      get { return barCodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlotContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlotContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlotId != other.SlotId) return false;
      if (Contents != other.Contents) return false;
      if(!barCodes_.Equals(other.barCodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlotId.Length != 0) hash ^= SlotId.GetHashCode();
      if (Contents != 0) hash ^= Contents.GetHashCode();
      hash ^= barCodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SlotId);
      }
      if (Contents != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Contents);
      }
      barCodes_.WriteTo(output, _repeated_barCodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlotId);
      }
      if (Contents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Contents);
      }
      size += barCodes_.CalculateSize(_repeated_barCodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlotContent other) {
      if (other == null) {
        return;
      }
      if (other.SlotId.Length != 0) {
        SlotId = other.SlotId;
      }
      if (other.Contents != 0) {
        Contents = other.Contents;
      }
      barCodes_.Add(other.barCodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SlotId = input.ReadString();
            break;
          }
          case 16: {
            contents_ = (global::GibController.SlotContent.Types.Contents) input.ReadEnum();
            break;
          }
          case 26: {
            barCodes_.AddEntriesFrom(input, _repeated_barCodes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SlotContent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Contents {
        [pbr::OriginalName("CONTENTS_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("EMPTY")] Empty = 1,
        [pbr::OriginalName("NON_EMPTY")] NonEmpty = 2,
      }

      public sealed partial class BarCode : pb::IMessage<BarCode> {
        private static readonly pb::MessageParser<BarCode> _parser = new pb::MessageParser<BarCode>(() => new BarCode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BarCode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GibController.SlotContent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BarCode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BarCode(BarCode other) : this() {
          barCode_ = other.barCode_;
          theta_ = other.theta_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BarCode Clone() {
          return new BarCode(this);
        }

        /// <summary>Field number for the "bar_code" field.</summary>
        public const int BarCode_FieldNumber = 1;
        private string barCode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BarCode_ {
          get { return barCode_; }
          set {
            barCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "theta" field.</summary>
        public const int ThetaFieldNumber = 2;
        private double theta_;
        /// <summary>
        /// Angle in degees of the bar-code (0 degrees is direction away from
        /// the induct buffer on the conveyor).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Theta {
          get { return theta_; }
          set {
            theta_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BarCode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BarCode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (BarCode_ != other.BarCode_) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Theta, other.Theta)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (BarCode_.Length != 0) hash ^= BarCode_.GetHashCode();
          if (Theta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Theta);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (BarCode_.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(BarCode_);
          }
          if (Theta != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Theta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (BarCode_.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(BarCode_);
          }
          if (Theta != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BarCode other) {
          if (other == null) {
            return;
          }
          if (other.BarCode_.Length != 0) {
            BarCode_ = other.BarCode_;
          }
          if (other.Theta != 0D) {
            Theta = other.Theta;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                BarCode_ = input.ReadString();
                break;
              }
              case 17: {
                Theta = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// Results of inspecting/scanning a tote.
  /// </summary>
  public sealed partial class ScanResult : pb::IMessage<ScanResult> {
    private static readonly pb::MessageParser<ScanResult> _parser = new pb::MessageParser<ScanResult>(() => new ScanResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult(ScanResult other) : this() {
      barCode_ = other.barCode_;
      toteContentsType_ = other.toteContentsType_;
      slotContents_ = other.slotContents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult Clone() {
      return new ScanResult(this);
    }

    /// <summary>Field number for the "bar_code" field.</summary>
    public const int BarCodeFieldNumber = 1;
    private string barCode_ = "";
    /// <summary>
    /// The bar_code read from the side of the tote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BarCode {
      get { return barCode_; }
      set {
        barCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tote_contents_type" field.</summary>
    public const int ToteContentsTypeFieldNumber = 2;
    private global::GibController.ToteContentsType toteContentsType_ = 0;
    /// <summary>
    /// The configuration of the tote dunange.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ToteContentsType ToteContentsType {
      get { return toteContentsType_; }
      set {
        toteContentsType_ = value;
      }
    }

    /// <summary>Field number for the "slot_contents" field.</summary>
    public const int SlotContentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GibController.SlotContent> _repeated_slotContents_codec
        = pb::FieldCodec.ForMessage(26, global::GibController.SlotContent.Parser);
    private readonly pbc::RepeatedField<global::GibController.SlotContent> slotContents_ = new pbc::RepeatedField<global::GibController.SlotContent>();
    /// <summary>
    /// An entry for each slot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GibController.SlotContent> SlotContents {
      get { return slotContents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BarCode != other.BarCode) return false;
      if (ToteContentsType != other.ToteContentsType) return false;
      if(!slotContents_.Equals(other.slotContents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BarCode.Length != 0) hash ^= BarCode.GetHashCode();
      if (ToteContentsType != 0) hash ^= ToteContentsType.GetHashCode();
      hash ^= slotContents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BarCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BarCode);
      }
      if (ToteContentsType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ToteContentsType);
      }
      slotContents_.WriteTo(output, _repeated_slotContents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BarCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BarCode);
      }
      if (ToteContentsType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToteContentsType);
      }
      size += slotContents_.CalculateSize(_repeated_slotContents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanResult other) {
      if (other == null) {
        return;
      }
      if (other.BarCode.Length != 0) {
        BarCode = other.BarCode;
      }
      if (other.ToteContentsType != 0) {
        ToteContentsType = other.ToteContentsType;
      }
      slotContents_.Add(other.slotContents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BarCode = input.ReadString();
            break;
          }
          case 16: {
            toteContentsType_ = (global::GibController.ToteContentsType) input.ReadEnum();
            break;
          }
          case 26: {
            slotContents_.AddEntriesFrom(input, _repeated_slotContents_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to load a tote from the conveyor into the buffer.  This will
  /// return once the tote reaches its final resting place.
  /// </summary>
  public sealed partial class SendToBufferRequest : pb::IMessage<SendToBufferRequest> {
    private static readonly pb::MessageParser<SendToBufferRequest> _parser = new pb::MessageParser<SendToBufferRequest>(() => new SendToBufferRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToBufferRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferRequest(SendToBufferRequest other) : this() {
      messageId_ = other.messageId_;
      toteId_ = other.toteId_;
      accessPriority_ = other.accessPriority_;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferRequest Clone() {
      return new SendToBufferRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tote_id" field.</summary>
    public const int ToteIdFieldNumber = 2;
    private string toteId_ = "";
    /// <summary>
    /// An identifier for the tote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToteId {
      get { return toteId_; }
      set {
        toteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_priority" field.</summary>
    public const int AccessPriorityFieldNumber = 3;
    private int accessPriority_;
    /// <summary>
    /// A hint for how likely the tote will need to be retrieved from the buffer.
    /// Valid range is from 0 to buffer capacity (inclusive).  0 is the highest
    /// priority (tote will be removed the soonest).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccessPriority {
      get { return accessPriority_; }
      set {
        accessPriority_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::GibController.ScanResult result_;
    /// <summary>
    /// If the tote happened to be scanned as part of processing the request
    /// this will contain the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToBufferRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToBufferRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ToteId != other.ToteId) return false;
      if (AccessPriority != other.AccessPriority) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ToteId.Length != 0) hash ^= ToteId.GetHashCode();
      if (AccessPriority != 0) hash ^= AccessPriority.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ToteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToteId);
      }
      if (AccessPriority != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccessPriority);
      }
      if (result_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ToteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToteId);
      }
      if (AccessPriority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccessPriority);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToBufferRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ToteId.Length != 0) {
        ToteId = other.ToteId;
      }
      if (other.AccessPriority != 0) {
        AccessPriority = other.AccessPriority;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::GibController.ScanResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            ToteId = input.ReadString();
            break;
          }
          case 24: {
            AccessPriority = input.ReadInt32();
            break;
          }
          case 34: {
            if (result_ == null) {
              result_ = new global::GibController.ScanResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of SendToBufferRequest.
  /// </summary>
  public sealed partial class SendToBufferResult : pb::IMessage<SendToBufferResult> {
    private static readonly pb::MessageParser<SendToBufferResult> _parser = new pb::MessageParser<SendToBufferResult>(() => new SendToBufferResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToBufferResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferResult(SendToBufferResult other) : this() {
      messageId_ = other.messageId_;
      resultCode_ = other.resultCode_;
      location_ = other.location_;
      scan_ = other.scan_ != null ? other.scan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToBufferResult Clone() {
      return new SendToBufferResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::GibController.ResultCode resultCode_ = 0;
    /// <summary>
    /// Result of operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ResultCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private string location_ = "";
    /// <summary>
    /// The location the tote was stored at if it happened successfully.  This
    /// is not meant to be programmatically interpretable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scan" field.</summary>
    public const int ScanFieldNumber = 4;
    private global::GibController.ScanResult scan_;
    /// <summary>
    /// If the tote happens to be scanned along the way to the buffer, this
    /// will be populated with the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanResult Scan {
      get { return scan_; }
      set {
        scan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToBufferResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToBufferResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (Location != other.Location) return false;
      if (!object.Equals(Scan, other.Scan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (scan_ != null) hash ^= Scan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Location);
      }
      if (scan_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (scan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToBufferResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.scan_ != null) {
        if (scan_ == null) {
          scan_ = new global::GibController.ScanResult();
        }
        Scan.MergeFrom(other.Scan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            resultCode_ = (global::GibController.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            Location = input.ReadString();
            break;
          }
          case 34: {
            if (scan_ == null) {
              scan_ = new global::GibController.ScanResult();
            }
            input.ReadMessage(scan_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request for a tote's content to be scanned.  Scanning only occurs in
  /// a secure area and might require moving a tote to that position.
  /// </summary>
  public sealed partial class ScanToteContentsRequest : pb::IMessage<ScanToteContentsRequest> {
    private static readonly pb::MessageParser<ScanToteContentsRequest> _parser = new pb::MessageParser<ScanToteContentsRequest>(() => new ScanToteContentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanToteContentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsRequest(ScanToteContentsRequest other) : this() {
      messageId_ = other.messageId_;
      toteSource_ = other.toteSource_;
      toteId_ = other.toteId_;
      scanType_ = other.scanType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsRequest Clone() {
      return new ScanToteContentsRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tote_source" field.</summary>
    public const int ToteSourceFieldNumber = 2;
    private global::GibController.ScanToteContentsRequest.Types.ToteSource toteSource_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanToteContentsRequest.Types.ToteSource ToteSource {
      get { return toteSource_; }
      set {
        toteSource_ = value;
      }
    }

    /// <summary>Field number for the "tote_id" field.</summary>
    public const int ToteIdFieldNumber = 3;
    private string toteId_ = "";
    /// <summary>
    /// Tote ID from the buffer to reserve.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToteId {
      get { return toteId_; }
      set {
        toteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scan_type" field.</summary>
    public const int ScanTypeFieldNumber = 4;
    private global::GibController.ScanToteContentsRequest.Types.ScanType scanType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanToteContentsRequest.Types.ScanType ScanType {
      get { return scanType_; }
      set {
        scanType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanToteContentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanToteContentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ToteSource != other.ToteSource) return false;
      if (ToteId != other.ToteId) return false;
      if (ScanType != other.ScanType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ToteSource != 0) hash ^= ToteSource.GetHashCode();
      if (ToteId.Length != 0) hash ^= ToteId.GetHashCode();
      if (ScanType != 0) hash ^= ScanType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ToteSource != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ToteSource);
      }
      if (ToteId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ToteId);
      }
      if (ScanType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) ScanType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ToteSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ToteSource);
      }
      if (ToteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToteId);
      }
      if (ScanType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScanType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanToteContentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ToteSource != 0) {
        ToteSource = other.ToteSource;
      }
      if (other.ToteId.Length != 0) {
        ToteId = other.ToteId;
      }
      if (other.ScanType != 0) {
        ScanType = other.ScanType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            toteSource_ = (global::GibController.ScanToteContentsRequest.Types.ToteSource) input.ReadEnum();
            break;
          }
          case 26: {
            ToteId = input.ReadString();
            break;
          }
          case 32: {
            scanType_ = (global::GibController.ScanToteContentsRequest.Types.ScanType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanToteContentsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ToteSource {
        [pbr::OriginalName("TOTE_SOURCE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The tote on the dock should be scanned.
        /// </summary>
        [pbr::OriginalName("DOCK")] Dock = 1,
        /// <summary>
        /// The tote should be unloaded from the buffer (tote_id will be set below).
        /// </summary>
        [pbr::OriginalName("BUFFER")] Buffer = 2,
        /// <summary>
        /// There is expected to be a tote that is already scannable.
        /// </summary>
        [pbr::OriginalName("SCANNABLE")] Scannable = 3,
      }

      public enum ScanType {
        [pbr::OriginalName("SCAN_TYPE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Scan the tote contents and the tote ID.
        /// </summary>
        [pbr::OriginalName("FULL_SCAN")] FullScan = 1,
        /// <summary>
        /// Scan only the tote barcode (not the contents).
        /// </summary>
        [pbr::OriginalName("TOTE_BARCODE_ONLY")] ToteBarcodeOnly = 2,
        /// <summary>
        /// Scan nothing (only move the tote in position for scanning if required).
        /// </summary>
        [pbr::OriginalName("NOTHING")] Nothing = 3,
      }

    }
    #endregion

  }

  public sealed partial class ScanToteContentsResult : pb::IMessage<ScanToteContentsResult> {
    private static readonly pb::MessageParser<ScanToteContentsResult> _parser = new pb::MessageParser<ScanToteContentsResult>(() => new ScanToteContentsResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanToteContentsResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsResult(ScanToteContentsResult other) : this() {
      messageId_ = other.messageId_;
      resultCode_ = other.resultCode_;
      scan_ = other.scan_ != null ? other.scan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanToteContentsResult Clone() {
      return new ScanToteContentsResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::GibController.ResultCode resultCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ResultCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "scan" field.</summary>
    public const int ScanFieldNumber = 3;
    private global::GibController.ScanResult scan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanResult Scan {
      get { return scan_; }
      set {
        scan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanToteContentsResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanToteContentsResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (!object.Equals(Scan, other.Scan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (scan_ != null) hash ^= Scan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (scan_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (scan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanToteContentsResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.scan_ != null) {
        if (scan_ == null) {
          scan_ = new global::GibController.ScanResult();
        }
        Scan.MergeFrom(other.Scan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            resultCode_ = (global::GibController.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (scan_ == null) {
              scan_ = new global::GibController.ScanResult();
            }
            input.ReadMessage(scan_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Send a tote to the dock (end of the conveyor).
  /// </summary>
  public sealed partial class SendToDockRequest : pb::IMessage<SendToDockRequest> {
    private static readonly pb::MessageParser<SendToDockRequest> _parser = new pb::MessageParser<SendToDockRequest>(() => new SendToDockRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToDockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockRequest(SendToDockRequest other) : this() {
      messageId_ = other.messageId_;
      toteId_ = other.toteId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockRequest Clone() {
      return new SendToDockRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tote_id" field.</summary>
    public const int ToteIdFieldNumber = 2;
    private string toteId_ = "";
    /// <summary>
    /// If the tote ID is set, the tote should be retrieved from the buffer
    /// and sent to the dock.  If it is not set (or empty), it is assumed there is
    /// a tote already on the conveyor ready to be sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToteId {
      get { return toteId_; }
      set {
        toteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToDockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToDockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ToteId != other.ToteId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ToteId.Length != 0) hash ^= ToteId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ToteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ToteId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ToteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToteId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToDockRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ToteId.Length != 0) {
        ToteId = other.ToteId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            ToteId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result of SendToDockRequest.
  /// </summary>
  public sealed partial class SendToDockResult : pb::IMessage<SendToDockResult> {
    private static readonly pb::MessageParser<SendToDockResult> _parser = new pb::MessageParser<SendToDockResult>(() => new SendToDockResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToDockResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockResult(SendToDockResult other) : this() {
      messageId_ = other.messageId_;
      resultCode_ = other.resultCode_;
      scan_ = other.scan_ != null ? other.scan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToDockResult Clone() {
      return new SendToDockResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::GibController.ResultCode resultCode_ = 0;
    /// <summary>
    /// Result of SendToBuffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ResultCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    /// <summary>Field number for the "scan" field.</summary>
    public const int ScanFieldNumber = 3;
    private global::GibController.ScanResult scan_;
    /// <summary>
    /// If the tote happens to be scanned along the way to the dock, this
    /// will be populated with the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanResult Scan {
      get { return scan_; }
      set {
        scan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToDockResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToDockResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ResultCode != other.ResultCode) return false;
      if (!object.Equals(Scan, other.Scan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (scan_ != null) hash ^= Scan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (scan_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Scan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (scan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToDockResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      if (other.scan_ != null) {
        if (scan_ == null) {
          scan_ = new global::GibController.ScanResult();
        }
        Scan.MergeFrom(other.Scan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            resultCode_ = (global::GibController.ResultCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (scan_ == null) {
              scan_ = new global::GibController.ScanResult();
            }
            input.ReadMessage(scan_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Ask the Induct buffer to send a tote to a docked AGV.  The tote
  /// must be at the dock.
  /// </summary>
  public sealed partial class EjectToteToAgvRequest : pb::IMessage<EjectToteToAgvRequest> {
    private static readonly pb::MessageParser<EjectToteToAgvRequest> _parser = new pb::MessageParser<EjectToteToAgvRequest>(() => new EjectToteToAgvRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EjectToteToAgvRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvRequest(EjectToteToAgvRequest other) : this() {
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvRequest Clone() {
      return new EjectToteToAgvRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// A unique identifier for this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EjectToteToAgvRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EjectToteToAgvRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EjectToteToAgvRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The result of ReceiveFromRobot request.
  /// </summary>
  public sealed partial class EjectToteToAgvResult : pb::IMessage<EjectToteToAgvResult> {
    private static readonly pb::MessageParser<EjectToteToAgvResult> _parser = new pb::MessageParser<EjectToteToAgvResult>(() => new EjectToteToAgvResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EjectToteToAgvResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvResult(EjectToteToAgvResult other) : this() {
      messageId_ = other.messageId_;
      resultCode_ = other.resultCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EjectToteToAgvResult Clone() {
      return new EjectToteToAgvResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    /// <summary>
    /// The message id of the request that this is a result of.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_code" field.</summary>
    public const int ResultCodeFieldNumber = 2;
    private global::GibController.ResultCode resultCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ResultCode ResultCode {
      get { return resultCode_; }
      set {
        resultCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EjectToteToAgvResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EjectToteToAgvResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (ResultCode != other.ResultCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (ResultCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResultCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (ResultCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EjectToteToAgvResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.ResultCode != 0) {
        ResultCode = other.ResultCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 16: {
            resultCode_ = (global::GibController.ResultCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Get the current status of the system.
  /// </summary>
  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ZoneStatus : pb::IMessage<ZoneStatus> {
    private static readonly pb::MessageParser<ZoneStatus> _parser = new pb::MessageParser<ZoneStatus>(() => new ZoneStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZoneStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneStatus(ZoneStatus other) : this() {
      totePresence_ = other.totePresence_;
      lastChangeTime_ = other.lastChangeTime_ != null ? other.lastChangeTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZoneStatus Clone() {
      return new ZoneStatus(this);
    }

    /// <summary>Field number for the "tote_presence" field.</summary>
    public const int TotePresenceFieldNumber = 1;
    private global::GibController.ZonePresence totePresence_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ZonePresence TotePresence {
      get { return totePresence_; }
      set {
        totePresence_ = value;
      }
    }

    /// <summary>Field number for the "last_change_time" field.</summary>
    public const int LastChangeTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastChangeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastChangeTime {
      get { return lastChangeTime_; }
      set {
        lastChangeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZoneStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZoneStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotePresence != other.TotePresence) return false;
      if (!object.Equals(LastChangeTime, other.LastChangeTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotePresence != 0) hash ^= TotePresence.GetHashCode();
      if (lastChangeTime_ != null) hash ^= LastChangeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotePresence != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TotePresence);
      }
      if (lastChangeTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LastChangeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotePresence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TotePresence);
      }
      if (lastChangeTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastChangeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZoneStatus other) {
      if (other == null) {
        return;
      }
      if (other.TotePresence != 0) {
        TotePresence = other.TotePresence;
      }
      if (other.lastChangeTime_ != null) {
        if (lastChangeTime_ == null) {
          lastChangeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastChangeTime.MergeFrom(other.LastChangeTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            totePresence_ = (global::GibController.ZonePresence) input.ReadEnum();
            break;
          }
          case 18: {
            if (lastChangeTime_ == null) {
              lastChangeTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(lastChangeTime_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Result for GetStatusRequest.
  /// </summary>
  public sealed partial class GetStatusResult : pb::IMessage<GetStatusResult> {
    private static readonly pb::MessageParser<GetStatusResult> _parser = new pb::MessageParser<GetStatusResult>(() => new GetStatusResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResult(GetStatusResult other) : this() {
      messageId_ = other.messageId_;
      lastEventId_ = other.lastEventId_;
      currentTime_ = other.currentTime_ != null ? other.currentTime_.Clone() : null;
      dockStatus_ = other.dockStatus_ != null ? other.dockStatus_.Clone() : null;
      scannableItem_ = other.scannableItem_ != null ? other.scannableItem_.Clone() : null;
      bufferInventory_ = other.bufferInventory_.Clone();
      currentCommand_ = other.currentCommand_ != null ? other.currentCommand_.Clone() : null;
      lastExcutedCommandId_ = other.lastExcutedCommandId_ != null ? other.lastExcutedCommandId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResult Clone() {
      return new GetStatusResult(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_event_id" field.</summary>
    public const int LastEventIdFieldNumber = 2;
    private string lastEventId_ = "";
    /// <summary>
    /// The latest event sent from the GIB as of
    /// this status request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastEventId {
      get { return lastEventId_; }
      set {
        lastEventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_time" field.</summary>
    public const int CurrentTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp currentTime_;
    /// <summary>
    /// Current time on the hardware clock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CurrentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    /// <summary>Field number for the "dock_status" field.</summary>
    public const int DockStatusFieldNumber = 4;
    private global::GibController.ZoneStatus dockStatus_;
    /// <summary>
    /// Is an item is at the dock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ZoneStatus DockStatus {
      get { return dockStatus_; }
      set {
        dockStatus_ = value;
      }
    }

    /// <summary>Field number for the "scannable_item" field.</summary>
    public const int ScannableItemFieldNumber = 5;
    private global::GibController.ZoneStatus scannableItem_;
    /// <summary>
    /// There is an item that is scannable, that isn't at the dock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ZoneStatus ScannableItem {
      get { return scannableItem_; }
      set {
        scannableItem_ = value;
      }
    }

    /// <summary>Field number for the "buffer_inventory" field.</summary>
    public const int BufferInventoryFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GibController.GetStatusResult.Types.InventoryItem> _repeated_bufferInventory_codec
        = pb::FieldCodec.ForMessage(50, global::GibController.GetStatusResult.Types.InventoryItem.Parser);
    private readonly pbc::RepeatedField<global::GibController.GetStatusResult.Types.InventoryItem> bufferInventory_ = new pbc::RepeatedField<global::GibController.GetStatusResult.Types.InventoryItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GibController.GetStatusResult.Types.InventoryItem> BufferInventory {
      get { return bufferInventory_; }
    }

    /// <summary>Field number for the "current_command" field.</summary>
    public const int CurrentCommandFieldNumber = 7;
    private global::GibController.GetStatusResult.Types.Command currentCommand_;
    /// <summary>
    /// The command the GIB is currently executing if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.GetStatusResult.Types.Command CurrentCommand {
      get { return currentCommand_; }
      set {
        currentCommand_ = value;
      }
    }

    /// <summary>Field number for the "last_excuted_command_id" field.</summary>
    public const int LastExcutedCommandIdFieldNumber = 8;
    private global::GibController.GetStatusResult.Types.Command lastExcutedCommandId_;
    /// <summary>
    /// The last command processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.GetStatusResult.Types.Command LastExcutedCommandId {
      get { return lastExcutedCommandId_; }
      set {
        lastExcutedCommandId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (LastEventId != other.LastEventId) return false;
      if (!object.Equals(CurrentTime, other.CurrentTime)) return false;
      if (!object.Equals(DockStatus, other.DockStatus)) return false;
      if (!object.Equals(ScannableItem, other.ScannableItem)) return false;
      if(!bufferInventory_.Equals(other.bufferInventory_)) return false;
      if (!object.Equals(CurrentCommand, other.CurrentCommand)) return false;
      if (!object.Equals(LastExcutedCommandId, other.LastExcutedCommandId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (LastEventId.Length != 0) hash ^= LastEventId.GetHashCode();
      if (currentTime_ != null) hash ^= CurrentTime.GetHashCode();
      if (dockStatus_ != null) hash ^= DockStatus.GetHashCode();
      if (scannableItem_ != null) hash ^= ScannableItem.GetHashCode();
      hash ^= bufferInventory_.GetHashCode();
      if (currentCommand_ != null) hash ^= CurrentCommand.GetHashCode();
      if (lastExcutedCommandId_ != null) hash ^= LastExcutedCommandId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
      if (LastEventId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LastEventId);
      }
      if (currentTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrentTime);
      }
      if (dockStatus_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DockStatus);
      }
      if (scannableItem_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ScannableItem);
      }
      bufferInventory_.WriteTo(output, _repeated_bufferInventory_codec);
      if (currentCommand_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CurrentCommand);
      }
      if (lastExcutedCommandId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastExcutedCommandId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (LastEventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastEventId);
      }
      if (currentTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTime);
      }
      if (dockStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DockStatus);
      }
      if (scannableItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScannableItem);
      }
      size += bufferInventory_.CalculateSize(_repeated_bufferInventory_codec);
      if (currentCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentCommand);
      }
      if (lastExcutedCommandId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastExcutedCommandId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResult other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.LastEventId.Length != 0) {
        LastEventId = other.LastEventId;
      }
      if (other.currentTime_ != null) {
        if (currentTime_ == null) {
          currentTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CurrentTime.MergeFrom(other.CurrentTime);
      }
      if (other.dockStatus_ != null) {
        if (dockStatus_ == null) {
          dockStatus_ = new global::GibController.ZoneStatus();
        }
        DockStatus.MergeFrom(other.DockStatus);
      }
      if (other.scannableItem_ != null) {
        if (scannableItem_ == null) {
          scannableItem_ = new global::GibController.ZoneStatus();
        }
        ScannableItem.MergeFrom(other.ScannableItem);
      }
      bufferInventory_.Add(other.bufferInventory_);
      if (other.currentCommand_ != null) {
        if (currentCommand_ == null) {
          currentCommand_ = new global::GibController.GetStatusResult.Types.Command();
        }
        CurrentCommand.MergeFrom(other.CurrentCommand);
      }
      if (other.lastExcutedCommandId_ != null) {
        if (lastExcutedCommandId_ == null) {
          lastExcutedCommandId_ = new global::GibController.GetStatusResult.Types.Command();
        }
        LastExcutedCommandId.MergeFrom(other.LastExcutedCommandId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
          case 18: {
            LastEventId = input.ReadString();
            break;
          }
          case 26: {
            if (currentTime_ == null) {
              currentTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(currentTime_);
            break;
          }
          case 34: {
            if (dockStatus_ == null) {
              dockStatus_ = new global::GibController.ZoneStatus();
            }
            input.ReadMessage(dockStatus_);
            break;
          }
          case 42: {
            if (scannableItem_ == null) {
              scannableItem_ = new global::GibController.ZoneStatus();
            }
            input.ReadMessage(scannableItem_);
            break;
          }
          case 50: {
            bufferInventory_.AddEntriesFrom(input, _repeated_bufferInventory_codec);
            break;
          }
          case 58: {
            if (currentCommand_ == null) {
              currentCommand_ = new global::GibController.GetStatusResult.Types.Command();
            }
            input.ReadMessage(currentCommand_);
            break;
          }
          case 66: {
            if (lastExcutedCommandId_ == null) {
              lastExcutedCommandId_ = new global::GibController.GetStatusResult.Types.Command();
            }
            input.ReadMessage(lastExcutedCommandId_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetStatusResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class InventoryItem : pb::IMessage<InventoryItem> {
        private static readonly pb::MessageParser<InventoryItem> _parser = new pb::MessageParser<InventoryItem>(() => new InventoryItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InventoryItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GibController.GetStatusResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryItem(InventoryItem other) : this() {
          toteId_ = other.toteId_;
          locationId_ = other.locationId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InventoryItem Clone() {
          return new InventoryItem(this);
        }

        /// <summary>Field number for the "tote_id" field.</summary>
        public const int ToteIdFieldNumber = 1;
        private string toteId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ToteId {
          get { return toteId_; }
          set {
            toteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "location_id" field.</summary>
        public const int LocationIdFieldNumber = 2;
        private string locationId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocationId {
          get { return locationId_; }
          set {
            locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InventoryItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InventoryItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ToteId != other.ToteId) return false;
          if (LocationId != other.LocationId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ToteId.Length != 0) hash ^= ToteId.GetHashCode();
          if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ToteId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ToteId);
          }
          if (LocationId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(LocationId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ToteId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ToteId);
          }
          if (LocationId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InventoryItem other) {
          if (other == null) {
            return;
          }
          if (other.ToteId.Length != 0) {
            ToteId = other.ToteId;
          }
          if (other.LocationId.Length != 0) {
            LocationId = other.LocationId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ToteId = input.ReadString();
                break;
              }
              case 18: {
                LocationId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Command : pb::IMessage<Command> {
        private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Command> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GibController.GetStatusResult.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Command() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Command(Command other) : this() {
          command_ = other.command_;
          messageId_ = other.messageId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Command Clone() {
          return new Command(this);
        }

        /// <summary>Field number for the "command" field.</summary>
        public const int Command_FieldNumber = 1;
        private int command_;
        /// <summary>
        /// The enum value of the case statement from InductBufferRequest
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Command_ {
          get { return command_; }
          set {
            command_ = value;
          }
        }

        /// <summary>Field number for the "message_id" field.</summary>
        public const int MessageIdFieldNumber = 2;
        private string messageId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MessageId {
          get { return messageId_; }
          set {
            messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Command);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Command other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Command_ != other.Command_) return false;
          if (MessageId != other.MessageId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Command_ != 0) hash ^= Command_.GetHashCode();
          if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Command_ != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Command_);
          }
          if (MessageId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(MessageId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Command_ != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Command_);
          }
          if (MessageId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Command other) {
          if (other == null) {
            return;
          }
          if (other.Command_ != 0) {
            Command_ = other.Command_;
          }
          if (other.MessageId.Length != 0) {
            MessageId = other.MessageId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Command_ = input.ReadInt32();
                break;
              }
              case 18: {
                MessageId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// All possible requests that can be made to the induct buffer.
  /// </summary>
  public sealed partial class InductBufferRequest : pb::IMessage<InductBufferRequest> {
    private static readonly pb::MessageParser<InductBufferRequest> _parser = new pb::MessageParser<InductBufferRequest>(() => new InductBufferRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InductBufferRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferRequest(InductBufferRequest other) : this() {
      switch (other.RequestsCase) {
        case RequestsOneofCase.AcceptFromAgv:
          AcceptFromAgv = other.AcceptFromAgv.Clone();
          break;
        case RequestsOneofCase.SendToBuffer:
          SendToBuffer = other.SendToBuffer.Clone();
          break;
        case RequestsOneofCase.ScanContents:
          ScanContents = other.ScanContents.Clone();
          break;
        case RequestsOneofCase.SendToDock:
          SendToDock = other.SendToDock.Clone();
          break;
        case RequestsOneofCase.SendToAgv:
          SendToAgv = other.SendToAgv.Clone();
          break;
        case RequestsOneofCase.GetStatus:
          GetStatus = other.GetStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferRequest Clone() {
      return new InductBufferRequest(this);
    }

    /// <summary>Field number for the "accept_from_agv" field.</summary>
    public const int AcceptFromAgvFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.AcceptToteFromAgvRequest AcceptFromAgv {
      get { return requestsCase_ == RequestsOneofCase.AcceptFromAgv ? (global::GibController.AcceptToteFromAgvRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.AcceptFromAgv;
      }
    }

    /// <summary>Field number for the "send_to_buffer" field.</summary>
    public const int SendToBufferFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.SendToBufferRequest SendToBuffer {
      get { return requestsCase_ == RequestsOneofCase.SendToBuffer ? (global::GibController.SendToBufferRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.SendToBuffer;
      }
    }

    /// <summary>Field number for the "scan_contents" field.</summary>
    public const int ScanContentsFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanToteContentsRequest ScanContents {
      get { return requestsCase_ == RequestsOneofCase.ScanContents ? (global::GibController.ScanToteContentsRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.ScanContents;
      }
    }

    /// <summary>Field number for the "send_to_dock" field.</summary>
    public const int SendToDockFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.SendToDockRequest SendToDock {
      get { return requestsCase_ == RequestsOneofCase.SendToDock ? (global::GibController.SendToDockRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.SendToDock;
      }
    }

    /// <summary>Field number for the "send_to_agv" field.</summary>
    public const int SendToAgvFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.EjectToteToAgvRequest SendToAgv {
      get { return requestsCase_ == RequestsOneofCase.SendToAgv ? (global::GibController.EjectToteToAgvRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.SendToAgv;
      }
    }

    /// <summary>Field number for the "get_status" field.</summary>
    public const int GetStatusFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.GetStatusRequest GetStatus {
      get { return requestsCase_ == RequestsOneofCase.GetStatus ? (global::GibController.GetStatusRequest) requests_ : null; }
      set {
        requests_ = value;
        requestsCase_ = value == null ? RequestsOneofCase.None : RequestsOneofCase.GetStatus;
      }
    }

    private object requests_;
    /// <summary>Enum of possible cases for the "requests" oneof.</summary>
    public enum RequestsOneofCase {
      None = 0,
      AcceptFromAgv = 1,
      SendToBuffer = 2,
      ScanContents = 3,
      SendToDock = 4,
      SendToAgv = 5,
      GetStatus = 6,
    }
    private RequestsOneofCase requestsCase_ = RequestsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestsOneofCase RequestsCase {
      get { return requestsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequests() {
      requestsCase_ = RequestsOneofCase.None;
      requests_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InductBufferRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InductBufferRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AcceptFromAgv, other.AcceptFromAgv)) return false;
      if (!object.Equals(SendToBuffer, other.SendToBuffer)) return false;
      if (!object.Equals(ScanContents, other.ScanContents)) return false;
      if (!object.Equals(SendToDock, other.SendToDock)) return false;
      if (!object.Equals(SendToAgv, other.SendToAgv)) return false;
      if (!object.Equals(GetStatus, other.GetStatus)) return false;
      if (RequestsCase != other.RequestsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestsCase_ == RequestsOneofCase.AcceptFromAgv) hash ^= AcceptFromAgv.GetHashCode();
      if (requestsCase_ == RequestsOneofCase.SendToBuffer) hash ^= SendToBuffer.GetHashCode();
      if (requestsCase_ == RequestsOneofCase.ScanContents) hash ^= ScanContents.GetHashCode();
      if (requestsCase_ == RequestsOneofCase.SendToDock) hash ^= SendToDock.GetHashCode();
      if (requestsCase_ == RequestsOneofCase.SendToAgv) hash ^= SendToAgv.GetHashCode();
      if (requestsCase_ == RequestsOneofCase.GetStatus) hash ^= GetStatus.GetHashCode();
      hash ^= (int) requestsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestsCase_ == RequestsOneofCase.AcceptFromAgv) {
        output.WriteRawTag(10);
        output.WriteMessage(AcceptFromAgv);
      }
      if (requestsCase_ == RequestsOneofCase.SendToBuffer) {
        output.WriteRawTag(18);
        output.WriteMessage(SendToBuffer);
      }
      if (requestsCase_ == RequestsOneofCase.ScanContents) {
        output.WriteRawTag(26);
        output.WriteMessage(ScanContents);
      }
      if (requestsCase_ == RequestsOneofCase.SendToDock) {
        output.WriteRawTag(34);
        output.WriteMessage(SendToDock);
      }
      if (requestsCase_ == RequestsOneofCase.SendToAgv) {
        output.WriteRawTag(42);
        output.WriteMessage(SendToAgv);
      }
      if (requestsCase_ == RequestsOneofCase.GetStatus) {
        output.WriteRawTag(50);
        output.WriteMessage(GetStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestsCase_ == RequestsOneofCase.AcceptFromAgv) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptFromAgv);
      }
      if (requestsCase_ == RequestsOneofCase.SendToBuffer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToBuffer);
      }
      if (requestsCase_ == RequestsOneofCase.ScanContents) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanContents);
      }
      if (requestsCase_ == RequestsOneofCase.SendToDock) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToDock);
      }
      if (requestsCase_ == RequestsOneofCase.SendToAgv) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToAgv);
      }
      if (requestsCase_ == RequestsOneofCase.GetStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InductBufferRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestsCase) {
        case RequestsOneofCase.AcceptFromAgv:
          if (AcceptFromAgv == null) {
            AcceptFromAgv = new global::GibController.AcceptToteFromAgvRequest();
          }
          AcceptFromAgv.MergeFrom(other.AcceptFromAgv);
          break;
        case RequestsOneofCase.SendToBuffer:
          if (SendToBuffer == null) {
            SendToBuffer = new global::GibController.SendToBufferRequest();
          }
          SendToBuffer.MergeFrom(other.SendToBuffer);
          break;
        case RequestsOneofCase.ScanContents:
          if (ScanContents == null) {
            ScanContents = new global::GibController.ScanToteContentsRequest();
          }
          ScanContents.MergeFrom(other.ScanContents);
          break;
        case RequestsOneofCase.SendToDock:
          if (SendToDock == null) {
            SendToDock = new global::GibController.SendToDockRequest();
          }
          SendToDock.MergeFrom(other.SendToDock);
          break;
        case RequestsOneofCase.SendToAgv:
          if (SendToAgv == null) {
            SendToAgv = new global::GibController.EjectToteToAgvRequest();
          }
          SendToAgv.MergeFrom(other.SendToAgv);
          break;
        case RequestsOneofCase.GetStatus:
          if (GetStatus == null) {
            GetStatus = new global::GibController.GetStatusRequest();
          }
          GetStatus.MergeFrom(other.GetStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::GibController.AcceptToteFromAgvRequest subBuilder = new global::GibController.AcceptToteFromAgvRequest();
            if (requestsCase_ == RequestsOneofCase.AcceptFromAgv) {
              subBuilder.MergeFrom(AcceptFromAgv);
            }
            input.ReadMessage(subBuilder);
            AcceptFromAgv = subBuilder;
            break;
          }
          case 18: {
            global::GibController.SendToBufferRequest subBuilder = new global::GibController.SendToBufferRequest();
            if (requestsCase_ == RequestsOneofCase.SendToBuffer) {
              subBuilder.MergeFrom(SendToBuffer);
            }
            input.ReadMessage(subBuilder);
            SendToBuffer = subBuilder;
            break;
          }
          case 26: {
            global::GibController.ScanToteContentsRequest subBuilder = new global::GibController.ScanToteContentsRequest();
            if (requestsCase_ == RequestsOneofCase.ScanContents) {
              subBuilder.MergeFrom(ScanContents);
            }
            input.ReadMessage(subBuilder);
            ScanContents = subBuilder;
            break;
          }
          case 34: {
            global::GibController.SendToDockRequest subBuilder = new global::GibController.SendToDockRequest();
            if (requestsCase_ == RequestsOneofCase.SendToDock) {
              subBuilder.MergeFrom(SendToDock);
            }
            input.ReadMessage(subBuilder);
            SendToDock = subBuilder;
            break;
          }
          case 42: {
            global::GibController.EjectToteToAgvRequest subBuilder = new global::GibController.EjectToteToAgvRequest();
            if (requestsCase_ == RequestsOneofCase.SendToAgv) {
              subBuilder.MergeFrom(SendToAgv);
            }
            input.ReadMessage(subBuilder);
            SendToAgv = subBuilder;
            break;
          }
          case 50: {
            global::GibController.GetStatusRequest subBuilder = new global::GibController.GetStatusRequest();
            if (requestsCase_ == RequestsOneofCase.GetStatus) {
              subBuilder.MergeFrom(GetStatus);
            }
            input.ReadMessage(subBuilder);
            GetStatus = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// All possible events/replies that the induct buffer can send out.
  /// </summary>
  public sealed partial class InductBufferEvent : pb::IMessage<InductBufferEvent> {
    private static readonly pb::MessageParser<InductBufferEvent> _parser = new pb::MessageParser<InductBufferEvent>(() => new InductBufferEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InductBufferEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GibController.InductBufferCommandsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferEvent(InductBufferEvent other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.Id:
          Id = other.Id.Clone();
          break;
        case EventOneofCase.DockEvent:
          DockEvent = other.DockEvent.Clone();
          break;
        case EventOneofCase.AcceptFromAgvResult:
          AcceptFromAgvResult = other.AcceptFromAgvResult.Clone();
          break;
        case EventOneofCase.SendToBufferResult:
          SendToBufferResult = other.SendToBufferResult.Clone();
          break;
        case EventOneofCase.ScanContentsResult:
          ScanContentsResult = other.ScanContentsResult.Clone();
          break;
        case EventOneofCase.SendToDockResult:
          SendToDockResult = other.SendToDockResult.Clone();
          break;
        case EventOneofCase.SendToAgvResult:
          SendToAgvResult = other.SendToAgvResult.Clone();
          break;
        case EventOneofCase.GetStatusResult:
          GetStatusResult = other.GetStatusResult.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InductBufferEvent Clone() {
      return new InductBufferEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.Identification Id {
      get { return eventCase_ == EventOneofCase.Id ? (global::GibController.Identification) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Id;
      }
    }

    /// <summary>Field number for the "dock_event" field.</summary>
    public const int DockEventFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.DockEvent DockEvent {
      get { return eventCase_ == EventOneofCase.DockEvent ? (global::GibController.DockEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.DockEvent;
      }
    }

    /// <summary>Field number for the "accept_from_agv_result" field.</summary>
    public const int AcceptFromAgvResultFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.AcceptToteFromAgvResult AcceptFromAgvResult {
      get { return eventCase_ == EventOneofCase.AcceptFromAgvResult ? (global::GibController.AcceptToteFromAgvResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.AcceptFromAgvResult;
      }
    }

    /// <summary>Field number for the "send_to_buffer_result" field.</summary>
    public const int SendToBufferResultFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.SendToBufferResult SendToBufferResult {
      get { return eventCase_ == EventOneofCase.SendToBufferResult ? (global::GibController.SendToBufferResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SendToBufferResult;
      }
    }

    /// <summary>Field number for the "scan_contents_result" field.</summary>
    public const int ScanContentsResultFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.ScanToteContentsResult ScanContentsResult {
      get { return eventCase_ == EventOneofCase.ScanContentsResult ? (global::GibController.ScanToteContentsResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.ScanContentsResult;
      }
    }

    /// <summary>Field number for the "send_to_dock_result" field.</summary>
    public const int SendToDockResultFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.SendToDockResult SendToDockResult {
      get { return eventCase_ == EventOneofCase.SendToDockResult ? (global::GibController.SendToDockResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SendToDockResult;
      }
    }

    /// <summary>Field number for the "send_to_agv_result" field.</summary>
    public const int SendToAgvResultFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.EjectToteToAgvResult SendToAgvResult {
      get { return eventCase_ == EventOneofCase.SendToAgvResult ? (global::GibController.EjectToteToAgvResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SendToAgvResult;
      }
    }

    /// <summary>Field number for the "get_status_result" field.</summary>
    public const int GetStatusResultFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GibController.GetStatusResult GetStatusResult {
      get { return eventCase_ == EventOneofCase.GetStatusResult ? (global::GibController.GetStatusResult) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.GetStatusResult;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      Id = 1,
      DockEvent = 2,
      AcceptFromAgvResult = 10,
      SendToBufferResult = 11,
      ScanContentsResult = 12,
      SendToDockResult = 13,
      SendToAgvResult = 14,
      GetStatusResult = 15,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InductBufferEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InductBufferEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(DockEvent, other.DockEvent)) return false;
      if (!object.Equals(AcceptFromAgvResult, other.AcceptFromAgvResult)) return false;
      if (!object.Equals(SendToBufferResult, other.SendToBufferResult)) return false;
      if (!object.Equals(ScanContentsResult, other.ScanContentsResult)) return false;
      if (!object.Equals(SendToDockResult, other.SendToDockResult)) return false;
      if (!object.Equals(SendToAgvResult, other.SendToAgvResult)) return false;
      if (!object.Equals(GetStatusResult, other.GetStatusResult)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.Id) hash ^= Id.GetHashCode();
      if (eventCase_ == EventOneofCase.DockEvent) hash ^= DockEvent.GetHashCode();
      if (eventCase_ == EventOneofCase.AcceptFromAgvResult) hash ^= AcceptFromAgvResult.GetHashCode();
      if (eventCase_ == EventOneofCase.SendToBufferResult) hash ^= SendToBufferResult.GetHashCode();
      if (eventCase_ == EventOneofCase.ScanContentsResult) hash ^= ScanContentsResult.GetHashCode();
      if (eventCase_ == EventOneofCase.SendToDockResult) hash ^= SendToDockResult.GetHashCode();
      if (eventCase_ == EventOneofCase.SendToAgvResult) hash ^= SendToAgvResult.GetHashCode();
      if (eventCase_ == EventOneofCase.GetStatusResult) hash ^= GetStatusResult.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.Id) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (eventCase_ == EventOneofCase.DockEvent) {
        output.WriteRawTag(18);
        output.WriteMessage(DockEvent);
      }
      if (eventCase_ == EventOneofCase.AcceptFromAgvResult) {
        output.WriteRawTag(82);
        output.WriteMessage(AcceptFromAgvResult);
      }
      if (eventCase_ == EventOneofCase.SendToBufferResult) {
        output.WriteRawTag(90);
        output.WriteMessage(SendToBufferResult);
      }
      if (eventCase_ == EventOneofCase.ScanContentsResult) {
        output.WriteRawTag(98);
        output.WriteMessage(ScanContentsResult);
      }
      if (eventCase_ == EventOneofCase.SendToDockResult) {
        output.WriteRawTag(106);
        output.WriteMessage(SendToDockResult);
      }
      if (eventCase_ == EventOneofCase.SendToAgvResult) {
        output.WriteRawTag(114);
        output.WriteMessage(SendToAgvResult);
      }
      if (eventCase_ == EventOneofCase.GetStatusResult) {
        output.WriteRawTag(122);
        output.WriteMessage(GetStatusResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (eventCase_ == EventOneofCase.DockEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DockEvent);
      }
      if (eventCase_ == EventOneofCase.AcceptFromAgvResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AcceptFromAgvResult);
      }
      if (eventCase_ == EventOneofCase.SendToBufferResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToBufferResult);
      }
      if (eventCase_ == EventOneofCase.ScanContentsResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScanContentsResult);
      }
      if (eventCase_ == EventOneofCase.SendToDockResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToDockResult);
      }
      if (eventCase_ == EventOneofCase.SendToAgvResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendToAgvResult);
      }
      if (eventCase_ == EventOneofCase.GetStatusResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetStatusResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InductBufferEvent other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.Id:
          if (Id == null) {
            Id = new global::GibController.Identification();
          }
          Id.MergeFrom(other.Id);
          break;
        case EventOneofCase.DockEvent:
          if (DockEvent == null) {
            DockEvent = new global::GibController.DockEvent();
          }
          DockEvent.MergeFrom(other.DockEvent);
          break;
        case EventOneofCase.AcceptFromAgvResult:
          if (AcceptFromAgvResult == null) {
            AcceptFromAgvResult = new global::GibController.AcceptToteFromAgvResult();
          }
          AcceptFromAgvResult.MergeFrom(other.AcceptFromAgvResult);
          break;
        case EventOneofCase.SendToBufferResult:
          if (SendToBufferResult == null) {
            SendToBufferResult = new global::GibController.SendToBufferResult();
          }
          SendToBufferResult.MergeFrom(other.SendToBufferResult);
          break;
        case EventOneofCase.ScanContentsResult:
          if (ScanContentsResult == null) {
            ScanContentsResult = new global::GibController.ScanToteContentsResult();
          }
          ScanContentsResult.MergeFrom(other.ScanContentsResult);
          break;
        case EventOneofCase.SendToDockResult:
          if (SendToDockResult == null) {
            SendToDockResult = new global::GibController.SendToDockResult();
          }
          SendToDockResult.MergeFrom(other.SendToDockResult);
          break;
        case EventOneofCase.SendToAgvResult:
          if (SendToAgvResult == null) {
            SendToAgvResult = new global::GibController.EjectToteToAgvResult();
          }
          SendToAgvResult.MergeFrom(other.SendToAgvResult);
          break;
        case EventOneofCase.GetStatusResult:
          if (GetStatusResult == null) {
            GetStatusResult = new global::GibController.GetStatusResult();
          }
          GetStatusResult.MergeFrom(other.GetStatusResult);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::GibController.Identification subBuilder = new global::GibController.Identification();
            if (eventCase_ == EventOneofCase.Id) {
              subBuilder.MergeFrom(Id);
            }
            input.ReadMessage(subBuilder);
            Id = subBuilder;
            break;
          }
          case 18: {
            global::GibController.DockEvent subBuilder = new global::GibController.DockEvent();
            if (eventCase_ == EventOneofCase.DockEvent) {
              subBuilder.MergeFrom(DockEvent);
            }
            input.ReadMessage(subBuilder);
            DockEvent = subBuilder;
            break;
          }
          case 82: {
            global::GibController.AcceptToteFromAgvResult subBuilder = new global::GibController.AcceptToteFromAgvResult();
            if (eventCase_ == EventOneofCase.AcceptFromAgvResult) {
              subBuilder.MergeFrom(AcceptFromAgvResult);
            }
            input.ReadMessage(subBuilder);
            AcceptFromAgvResult = subBuilder;
            break;
          }
          case 90: {
            global::GibController.SendToBufferResult subBuilder = new global::GibController.SendToBufferResult();
            if (eventCase_ == EventOneofCase.SendToBufferResult) {
              subBuilder.MergeFrom(SendToBufferResult);
            }
            input.ReadMessage(subBuilder);
            SendToBufferResult = subBuilder;
            break;
          }
          case 98: {
            global::GibController.ScanToteContentsResult subBuilder = new global::GibController.ScanToteContentsResult();
            if (eventCase_ == EventOneofCase.ScanContentsResult) {
              subBuilder.MergeFrom(ScanContentsResult);
            }
            input.ReadMessage(subBuilder);
            ScanContentsResult = subBuilder;
            break;
          }
          case 106: {
            global::GibController.SendToDockResult subBuilder = new global::GibController.SendToDockResult();
            if (eventCase_ == EventOneofCase.SendToDockResult) {
              subBuilder.MergeFrom(SendToDockResult);
            }
            input.ReadMessage(subBuilder);
            SendToDockResult = subBuilder;
            break;
          }
          case 114: {
            global::GibController.EjectToteToAgvResult subBuilder = new global::GibController.EjectToteToAgvResult();
            if (eventCase_ == EventOneofCase.SendToAgvResult) {
              subBuilder.MergeFrom(SendToAgvResult);
            }
            input.ReadMessage(subBuilder);
            SendToAgvResult = subBuilder;
            break;
          }
          case 122: {
            global::GibController.GetStatusResult subBuilder = new global::GibController.GetStatusResult();
            if (eventCase_ == EventOneofCase.GetStatusResult) {
              subBuilder.MergeFrom(GetStatusResult);
            }
            input.ReadMessage(subBuilder);
            GetStatusResult = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
